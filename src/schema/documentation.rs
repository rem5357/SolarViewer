use super::discovery::TableInfo;
use anyhow::Result;
use std::fs;
use std::path::Path;

pub fn generate_markdown(tables: &[TableInfo], output_path: &str, db_path: &str) -> Result<()> {
    let mut md = String::new();

    // Header
    md.push_str("# Astrosynthesis Database Schema\n\n");
    md.push_str(&format!("**Source File**: `{}`\n\n", db_path));
    md.push_str(&format!("**Generated**: {}\n\n", chrono::Local::now().format("%Y-%m-%d %H:%M:%S")));
    md.push_str(&format!("**Total Tables**: {}\n\n", tables.len()));

    // Table of Contents
    md.push_str("## Table of Contents\n\n");
    for table in tables {
        md.push_str(&format!("- [{}](#{})\n", table.name, table.name.to_lowercase().replace('_', "-")));
    }
    md.push_str("\n---\n\n");

    // Summary Statistics
    md.push_str("## Summary Statistics\n\n");
    md.push_str("| Table | Rows | Columns | Foreign Keys |\n");
    md.push_str("|-------|------|---------|-------------|\n");
    for table in tables {
        md.push_str(&format!(
            "| {} | {} | {} | {} |\n",
            table.name,
            table.row_count,
            table.columns.len(),
            table.foreign_keys.len()
        ));
    }
    md.push_str("\n---\n\n");

    // Detailed Table Information
    md.push_str("## Detailed Table Information\n\n");

    for table in tables {
        // Table Header
        md.push_str(&format!("### {}\n\n", table.name));
        md.push_str(&format!("**Row Count**: {}\n\n", table.row_count));

        // Columns
        md.push_str("#### Columns\n\n");
        md.push_str("| # | Name | Type | Not Null | Default | Primary Key |\n");
        md.push_str("|---|------|------|----------|---------|-------------|\n");

        for col in &table.columns {
            md.push_str(&format!(
                "| {} | {} | {} | {} | {} | {} |\n",
                col.cid,
                col.name,
                col.type_name,
                if col.not_null { "✓" } else { "" },
                col.default_value.as_deref().unwrap_or("-"),
                if col.is_pk { "✓" } else { "" }
            ));
        }
        md.push_str("\n");

        // Foreign Keys
        if !table.foreign_keys.is_empty() {
            md.push_str("#### Foreign Keys\n\n");
            md.push_str("| From Column | To Table | To Column | On Update | On Delete |\n");
            md.push_str("|-------------|----------|-----------|-----------|----------|\n");

            for fk in &table.foreign_keys {
                md.push_str(&format!(
                    "| {} | {} | {} | {} | {} |\n",
                    fk.from, fk.table, fk.to, fk.on_update, fk.on_delete
                ));
            }
            md.push_str("\n");
        }

        // Sample Data
        if !table.sample_data.is_empty() {
            md.push_str("#### Sample Data\n\n");

            // Get column names from first row
            let first_row = &table.sample_data[0];
            let column_names: Vec<&String> = first_row.keys().collect();

            // Header
            md.push_str("|");
            for col_name in &column_names {
                md.push_str(&format!(" {} |", col_name));
            }
            md.push_str("\n");

            // Separator
            md.push_str("|");
            for _ in &column_names {
                md.push_str("---|");
            }
            md.push_str("\n");

            // Data rows (limit to 5 for readability)
            for row in table.sample_data.iter().take(5) {
                md.push_str("|");
                for col_name in &column_names {
                    let value = row.get(*col_name).map(|s| s.as_str()).unwrap_or("NULL");
                    // Truncate long values for readability
                    let display_value = if value.len() > 50 {
                        format!("{}...", &value[..47])
                    } else {
                        value.to_string()
                    };
                    md.push_str(&format!(" {} |", display_value));
                }
                md.push_str("\n");
            }
            md.push_str("\n");
        }

        md.push_str("---\n\n");
    }

    // Relationship Diagram (text-based)
    md.push_str("## Relationships\n\n");
    md.push_str("```\n");
    for table in tables {
        if !table.foreign_keys.is_empty() {
            for fk in &table.foreign_keys {
                md.push_str(&format!(
                    "{}.{} -> {}.{}\n",
                    table.name, fk.from, fk.table, fk.to
                ));
            }
        }
    }
    md.push_str("```\n\n");

    // Footer
    md.push_str("---\n\n");
    md.push_str("*This schema documentation was automatically generated by SolarViewer*\n");

    // Ensure output directory exists
    if let Some(parent) = Path::new(output_path).parent() {
        fs::create_dir_all(parent)?;
    }

    // Write to file
    fs::write(output_path, md)?;

    Ok(())
}
